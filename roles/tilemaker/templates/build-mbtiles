#! /bin/bash -e

PBF_DOWNLOAD_URL={{ tilemaker_pbf_download_url }}
PBF_FILE=tilemaker-input.osm.pbf
PREVIOUS_PBF_FILE=tilemaker-input.previous.osm.pbf
IMAGE_NAME="stadtnavi/tilemaker:d0e8e69aaf4e9adbfc55b238d48fe49ef2b857a5"
CONTAINER_NAME="tilemaker"

TILEMAKER_OUTPUT_FILE=tilemaker-output.inprocess.mbtiles
TILEMAKER_FINAL_OUTPUT_FILE=tilemaker-output.mbtiles


if [ -f "$PBF_FILE" ]; then
  cp ${PBF_FILE} ${PREVIOUS_PBF_FILE}
  echo "$PBF_FILE exists. Downloading updates."
  pyosmium-up-to-date -v $PBF_FILE

  # sometimes the update process results in a file with nodes missing from ways
  if osmium check-refs ${PBF_FILE}; then
    echo "OSM file has the correct referential integrity"
  else
    rm $PBF_FILE
    send-to-matrix "tilemaker referential integrity check failed. Redownloading pbf file..."
    curl --location -s "${PBF_DOWNLOAD_URL}" -o ${PBF_FILE}
  fi
else
  echo "$PBF_FILE does not exist."
  curl --location -s "${PBF_DOWNLOAD_URL}" -o ${PBF_FILE}
fi

rm -f ${TILEMAKER_OUTPUT_FILE}

docker pull ${IMAGE_NAME}
docker stop ${CONTAINER_NAME} || true
docker run \
  -v /var/tilemaker/:/srv \
  --name ${CONTAINER_NAME} \
  --rm \
  --cpu-shares 512 \
  ${IMAGE_NAME} /srv/${PBF_FILE} \
  --output=/srv/${TILEMAKER_OUTPUT_FILE} \
  --config=/srv/config-openmaptiles.json \
  --process=/srv/process-openmaptiles.lua \

# tilemaker doesn't like it when the output file already exists to we move it
mv "${TILEMAKER_OUTPUT_FILE}" "${TILEMAKER_FINAL_OUTPUT_FILE}"

TIMESTAMP=`osmium fileinfo -g header.option.osmosis_replication_timestamp ${PBF_FILE}`

send-to-matrix "üèóÔ∏è mbtiles build complete on {{ inventory_hostname }}. OSM data from ${TIMESTAMP}"
